{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dounia\\\\ChatWithPDF_LLM_RAG_App\\\\frontend\\\\src\\\\index.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport BotMessage from \"./components/BotMessage\";\nimport UserMessage from \"./components/UserMessage\";\nimport Messages from \"./components/Messages\";\nimport Input from \"./components/Input\";\nimport { getChatbotResponse } from \"./ChatBotAPI\"; // Import the API function\n\nimport \"./index.css\";\nimport Header from \"./components/Header\";\nimport Preloader from \"./components/Preloader\";\nimport SpeechToText from \"./components/SpeechToText\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Chatbot() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [transcript, setTranscript] = useState(\"\"); // State to hold transcript\n\n  useEffect(() => {\n    async function loadWelcomeMessage() {\n      try {\n        const welcomeMessage = \"Hello, how can I assist you?\";\n        setMessages([/*#__PURE__*/_jsxDEV(BotMessage, {\n          fetchMessage: async () => welcomeMessage\n        }, \"0\", false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 11\n        }, this)]);\n      } catch (error) {\n        console.error(\"Error loading welcome message:\", error);\n      }\n    }\n    loadWelcomeMessage();\n  }, []);\n  const send = async question => {\n    const userMessageKey = `user-${Date.now()}`;\n    const botMessageKey = `bot-${Date.now()}`;\n\n    // Display the UserMessage immediately\n    setMessages(prevMessages => [...prevMessages, /*#__PURE__*/_jsxDEV(UserMessage, {\n      text: question\n    }, userMessageKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(BotMessage, {\n      fetchMessage: async () => \"...\"\n    }, botMessageKey, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)]);\n    try {\n      // Fetch bot's response from API\n      const botResponse = await getChatbotResponse(question);\n\n      // Update state to include the BotMessage once it’s ready\n      setMessages(prevMessages => [...prevMessages.slice(0, prevMessages.length - 1), /*#__PURE__*/_jsxDEV(BotMessage, {\n        fetchMessage: async () => botResponse\n      }, botMessageKey, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this)]);\n    } catch (error) {\n      console.error(\"Error sending message:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Preloader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chatbot\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SpeechToText, {\n        setTranscript: setTranscript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        onSend: send,\n        value: transcript\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(Chatbot, \"O3Lye8/V5s/mmaiOI8aK1xUhd00=\");\n_c = Chatbot;\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(/*#__PURE__*/_jsxDEV(Chatbot, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 74,\n  columnNumber: 17\n}, this), rootElement);\n\n// par chatgpt\n// const rootElement = document.getElementById('root');\n// if (rootElement) {\n//   const root = ReactDOM.createRoot(rootElement);\n//   root.render(<Chatbot />);\n// }\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","useEffect","ReactDOM","BotMessage","UserMessage","Messages","Input","getChatbotResponse","Header","Preloader","SpeechToText","jsxDEV","_jsxDEV","Fragment","_Fragment","Chatbot","_s","messages","setMessages","transcript","setTranscript","loadWelcomeMessage","welcomeMessage","fetchMessage","fileName","_jsxFileName","lineNumber","columnNumber","error","console","send","question","userMessageKey","Date","now","botMessageKey","prevMessages","text","botResponse","slice","length","children","className","onSend","value","_c","rootElement","document","getElementById","render","$RefreshReg$"],"sources":["C:/Users/Dounia/ChatWithPDF_LLM_RAG_App/frontend/src/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport BotMessage from \"./components/BotMessage\";\r\nimport UserMessage from \"./components/UserMessage\";\r\nimport Messages from \"./components/Messages\";\r\nimport Input from \"./components/Input\";\r\nimport { getChatbotResponse } from \"./ChatBotAPI\"; // Import the API function\r\n\r\nimport \"./index.css\";\r\nimport Header from \"./components/Header\";\r\nimport Preloader from \"./components/Preloader\";\r\nimport SpeechToText from \"./components/SpeechToText\";\r\n\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [transcript, setTranscript] = useState(\"\"); // State to hold transcript\r\n\r\n  useEffect(() => {\r\n    async function loadWelcomeMessage() {\r\n      try {\r\n        const welcomeMessage = \"Hello, how can I assist you?\";\r\n        setMessages([\r\n          <BotMessage key=\"0\" fetchMessage={async () => welcomeMessage} />\r\n        ]);\r\n      } catch (error) {\r\n        console.error(\"Error loading welcome message:\", error);\r\n      }\r\n    }\r\n    loadWelcomeMessage();\r\n  }, []);\r\n\r\n  const send = async (question) => {\r\n    const userMessageKey = `user-${Date.now()}`;\r\n    const botMessageKey = `bot-${Date.now()}`;\r\n\r\n    // Display the UserMessage immediately\r\n    setMessages((prevMessages) => [\r\n      ...prevMessages,\r\n      <UserMessage key={userMessageKey} text={question} />,\r\n      <BotMessage key={botMessageKey} fetchMessage={async () => \"...\"} />\r\n    ]);\r\n\r\n    try {\r\n      // Fetch bot's response from API\r\n      const botResponse = await getChatbotResponse(question);\r\n\r\n      // Update state to include the BotMessage once it’s ready\r\n      setMessages((prevMessages) => [\r\n        ...prevMessages.slice(0, prevMessages.length - 1),\r\n        <BotMessage key={botMessageKey} fetchMessage={async () => botResponse} />\r\n      ]);\r\n    } catch (error) {\r\n      console.error(\"Error sending message:\", error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Preloader />\r\n      <div className=\"chatbot\">\r\n        <Header />\r\n        {/* Pass the send function and transcript setter to SpeechToText */}\r\n        <SpeechToText  setTranscript={setTranscript} />\r\n        <Messages messages={messages} />\r\n        {/* Pass the transcript to the Input component */}\r\n        <Input onSend={send} value={transcript} />\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(<Chatbot />, rootElement);\r\n\r\n// par chatgpt\r\n// const rootElement = document.getElementById('root');\r\n// if (rootElement) {\r\n//   const root = ReactDOM.createRoot(rootElement);\r\n//   root.render(<Chatbot />);\r\n// }\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}